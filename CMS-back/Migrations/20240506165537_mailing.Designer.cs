// <auto-generated />
using System;
using CMS_back.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CMS_back.Migrations
{
    [DbContext(typeof(CMSContext))]
    [Migration("20240506165537_mailing")]
    partial class mailing
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CMS_back.Models.ACAD_YEAR", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ACAD_YEAR");
                });

            modelBuilder.Entity("CMS_back.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FaculityEmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FaculityLeaderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ScientificDegree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityEmployeeID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CMS_back.Models.Assess", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Assess");
                });

            modelBuilder.Entity("CMS_back.Models.BYLAW", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FaculityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyMethodID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityID");

                    b.HasIndex("StudyMethodID");

                    b.ToTable("BYLAW");
                });

            modelBuilder.Entity("CMS_back.Models.Committees", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FaculityNodeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FaculityNodeID");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("CMS_back.Models.Control", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ACAD_YEAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaculityID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Faculity_Node")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculity_Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculity_Semester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCreatorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityID");

                    b.HasIndex("UserCreatorID");

                    b.ToTable("Control");
                });

            modelBuilder.Entity("CMS_back.Models.ControlSubject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ControlID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ControlID");

                    b.HasIndex("SubjectID");

                    b.ToTable("ControlSubject");
                });

            modelBuilder.Entity("CMS_back.Models.ControlUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ControlID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ControlID");

                    b.HasIndex("UserID");

                    b.ToTable("ControlUsers");
                });

            modelBuilder.Entity("CMS_back.Models.Control_Addresses", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControlID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ControlID");

                    b.ToTable("conrol_Addresse");
                });

            modelBuilder.Entity("CMS_back.Models.Control_Note", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ControlID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("WriteDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ControlID");

                    b.HasIndex("WriteByID");

                    b.ToTable("Control_Note");
                });

            modelBuilder.Entity("CMS_back.Models.Control_Task", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ControlID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlID");

                    b.HasIndex("CreateByID");

                    b.ToTable("Control_Task");
                });

            modelBuilder.Entity("CMS_back.Models.Control_UserTasks", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Control_TaskID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserTaskID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Control_TaskID");

                    b.HasIndex("UserTaskID");

                    b.ToTable("Control_UserTasks");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculityTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLeaderID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityTypeID");

                    b.HasIndex("UserLeaderID")
                        .IsUnique()
                        .HasFilter("[UserLeaderID] IS NOT NULL");

                    b.ToTable("Faculity");
                });

            modelBuilder.Entity("CMS_back.Models.FaculityHierarycal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BAYLAWID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BYLAWId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhaseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SemesterID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BYLAWId");

                    b.HasIndex("PhaseID");

                    b.HasIndex("SemesterID");

                    b.ToTable("FaculityHierarycal");
                });

            modelBuilder.Entity("CMS_back.Models.FaculityType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FaculityType");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity_Node", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculityNodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityNodeID");

                    b.HasIndex("ParentID");

                    b.ToTable("Faculity_Node");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity_Phases", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityID");

                    b.ToTable("Faculity_Phase");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity_Semester", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityID");

                    b.ToTable("Faculity_Semester");
                });

            modelBuilder.Entity("CMS_back.Models.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotionalID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityID");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("CMS_back.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculityID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("CMS_back.Models.StudentSemester", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcadYearID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FaculityHierarcalID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FaculityNodeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("GPA")
                        .HasColumnType("float");

                    b.Property<int?>("IsPass")
                        .HasColumnType("int");

                    b.Property<double?>("Percentage")
                        .HasColumnType("float");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentStatusID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("TOTAL")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AcadYearID");

                    b.HasIndex("FaculityHierarcalID");

                    b.HasIndex("FaculityNodeID");

                    b.HasIndex("StudentID");

                    b.HasIndex("StudentStatusID");

                    b.ToTable("StudentSemester");
                });

            modelBuilder.Entity("CMS_back.Models.Student_STATUS", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Student_Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Student_STATUS");
                });

            modelBuilder.Entity("CMS_back.Models.Student_SemesterSubjects", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Degree")
                        .HasColumnType("float");

                    b.Property<int?>("IsPass")
                        .HasColumnType("int");

                    b.Property<string>("StudentSemesterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StudentSemesterID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Student_SemesterSubjects");
                });

            modelBuilder.Entity("CMS_back.Models.Study_Method", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Study_Method");
                });

            modelBuilder.Entity("CMS_back.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Credit_Hours")
                        .HasColumnType("int");

                    b.Property<string>("FaculityHierarycalID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FaculityNodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("IsDone")
                        .HasColumnType("int");

                    b.Property<int?>("IsReview")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FaculityHierarycalID");

                    b.HasIndex("FaculityNodeID");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("CMS_back.Models.Subject_Assess", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssessID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("MAX_Degree")
                        .HasColumnType("float");

                    b.Property<double?>("MIN_Degree")
                        .HasColumnType("float");

                    b.Property<string>("SubjectID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AssessID");

                    b.HasIndex("SubjectID");

                    b.ToTable("SubjectAssesse");
                });

            modelBuilder.Entity("CMS_back.Models.Subject_Committees", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommitteeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Subject_Committee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25a371ca-3fb0-4bc0-82de-0dddcdffc02b",
                            Name = "AdminUniversity",
                            NormalizedName = "AdminUniversity"
                        },
                        new
                        {
                            Id = "04081a5f-257b-49a5-abef-f97e40dbe47b",
                            Name = "AdminFaculty",
                            NormalizedName = "AdminFaculty"
                        },
                        new
                        {
                            Id = "defec704-ee91-4468-a82c-96c63a91a5d2",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CMS_back.Models.ApplicationUser", b =>
                {
                    b.HasOne("CMS_back.Models.Faculity", "FaculityEmployee")
                        .WithMany("Users")
                        .HasForeignKey("FaculityEmployeeID");

                    b.Navigation("FaculityEmployee");
                });

            modelBuilder.Entity("CMS_back.Models.BYLAW", b =>
                {
                    b.HasOne("CMS_back.Models.Faculity", "Faculity")
                        .WithMany()
                        .HasForeignKey("FaculityID");

                    b.HasOne("CMS_back.Models.Study_Method", "StudyMethod")
                        .WithMany()
                        .HasForeignKey("StudyMethodID");

                    b.Navigation("Faculity");

                    b.Navigation("StudyMethod");
                });

            modelBuilder.Entity("CMS_back.Models.Committees", b =>
                {
                    b.HasOne("CMS_back.Models.Faculity_Node", "FaculityNode")
                        .WithMany("Committees")
                        .HasForeignKey("FaculityNodeID");

                    b.Navigation("FaculityNode");
                });

            modelBuilder.Entity("CMS_back.Models.Control", b =>
                {
                    b.HasOne("CMS_back.Models.Faculity", "Faculity")
                        .WithMany("Controls")
                        .HasForeignKey("FaculityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Models.ApplicationUser", "UserCreator")
                        .WithMany("UserCreatorControls")
                        .HasForeignKey("UserCreatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculity");

                    b.Navigation("UserCreator");
                });

            modelBuilder.Entity("CMS_back.Models.ControlSubject", b =>
                {
                    b.HasOne("CMS_back.Models.Control", "Control")
                        .WithMany("ControlSubjects")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Models.Subject", "Subject")
                        .WithMany("ControlSubjects")
                        .HasForeignKey("SubjectID");

                    b.Navigation("Control");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CMS_back.Models.ControlUsers", b =>
                {
                    b.HasOne("CMS_back.Models.Control", "Control")
                        .WithMany("ControlUsers")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Control");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS_back.Models.Control_Addresses", b =>
                {
                    b.HasOne("CMS_back.Models.Control", "Control")
                        .WithMany("conrol_Addresses")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");
                });

            modelBuilder.Entity("CMS_back.Models.Control_Note", b =>
                {
                    b.HasOne("CMS_back.Models.Control", "Control")
                        .WithMany()
                        .HasForeignKey("ControlID");

                    b.HasOne("CMS_back.Models.ApplicationUser", "WriteBy")
                        .WithMany()
                        .HasForeignKey("WriteByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("WriteBy");
                });

            modelBuilder.Entity("CMS_back.Models.Control_Task", b =>
                {
                    b.HasOne("CMS_back.Models.Control", "Control")
                        .WithMany()
                        .HasForeignKey("ControlID");

                    b.HasOne("CMS_back.Models.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("CMS_back.Models.Control_UserTasks", b =>
                {
                    b.HasOne("CMS_back.Models.Control_Task", "Control_Task")
                        .WithMany("UserTasks")
                        .HasForeignKey("Control_TaskID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMS_back.Models.ApplicationUser", "UserTask")
                        .WithMany()
                        .HasForeignKey("UserTaskID");

                    b.Navigation("Control_Task");

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity", b =>
                {
                    b.HasOne("CMS_back.Models.FaculityType", "FaculityType")
                        .WithMany()
                        .HasForeignKey("FaculityTypeID");

                    b.HasOne("CMS_back.Models.ApplicationUser", "UserLeader")
                        .WithOne("FaculityLeader")
                        .HasForeignKey("CMS_back.Models.Faculity", "UserLeaderID");

                    b.Navigation("FaculityType");

                    b.Navigation("UserLeader");
                });

            modelBuilder.Entity("CMS_back.Models.FaculityHierarycal", b =>
                {
                    b.HasOne("CMS_back.Models.BYLAW", "BYLAW")
                        .WithMany()
                        .HasForeignKey("BYLAWId");

                    b.HasOne("CMS_back.Models.Faculity_Phases", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseID");

                    b.HasOne("CMS_back.Models.Faculity_Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterID");

                    b.Navigation("BYLAW");

                    b.Navigation("Phase");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity_Node", b =>
                {
                    b.HasOne("CMS_back.Models.Faculity", "FaculityNode")
                        .WithMany("Nodes")
                        .HasForeignKey("FaculityNodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Models.Faculity_Node", "Parent")
                        .WithMany("Faculity_Nodes")
                        .HasForeignKey("ParentID");

                    b.Navigation("FaculityNode");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity_Phases", b =>
                {
                    b.HasOne("CMS_back.Models.Faculity", "Faculity")
                        .WithMany("Phases")
                        .HasForeignKey("FaculityID");

                    b.Navigation("Faculity");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity_Semester", b =>
                {
                    b.HasOne("CMS_back.Models.Faculity", "Faculity")
                        .WithMany("Semesters")
                        .HasForeignKey("FaculityID");

                    b.Navigation("Faculity");
                });

            modelBuilder.Entity("CMS_back.Models.Staff", b =>
                {
                    b.HasOne("CMS_back.Models.Faculity", "Faculity")
                        .WithMany("Staff")
                        .HasForeignKey("FaculityID");

                    b.Navigation("Faculity");
                });

            modelBuilder.Entity("CMS_back.Models.Student", b =>
                {
                    b.HasOne("CMS_back.Models.Faculity", "Faculity")
                        .WithMany()
                        .HasForeignKey("FaculityID");

                    b.Navigation("Faculity");
                });

            modelBuilder.Entity("CMS_back.Models.StudentSemester", b =>
                {
                    b.HasOne("CMS_back.Models.ACAD_YEAR", "AcadYear")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("AcadYearID");

                    b.HasOne("CMS_back.Models.FaculityHierarycal", "FaculityHierarcal")
                        .WithMany()
                        .HasForeignKey("FaculityHierarcalID");

                    b.HasOne("CMS_back.Models.Faculity_Node", "FaculityNode")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("FaculityNodeID");

                    b.HasOne("CMS_back.Models.Student", "Student")
                        .WithMany("Semesters")
                        .HasForeignKey("StudentID");

                    b.HasOne("CMS_back.Models.Student_STATUS", "StudentStatus")
                        .WithMany()
                        .HasForeignKey("StudentStatusID");

                    b.Navigation("AcadYear");

                    b.Navigation("FaculityHierarcal");

                    b.Navigation("FaculityNode");

                    b.Navigation("Student");

                    b.Navigation("StudentStatus");
                });

            modelBuilder.Entity("CMS_back.Models.Student_SemesterSubjects", b =>
                {
                    b.HasOne("CMS_back.Models.StudentSemester", "StudentSemester")
                        .WithMany()
                        .HasForeignKey("StudentSemesterID");

                    b.HasOne("CMS_back.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID");

                    b.Navigation("StudentSemester");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CMS_back.Models.Subject", b =>
                {
                    b.HasOne("CMS_back.Models.FaculityHierarycal", "FaculityHierarycal")
                        .WithMany()
                        .HasForeignKey("FaculityHierarycalID");

                    b.HasOne("CMS_back.Models.Faculity_Node", "FaculityNode")
                        .WithMany("Subjects")
                        .HasForeignKey("FaculityNodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaculityHierarycal");

                    b.Navigation("FaculityNode");
                });

            modelBuilder.Entity("CMS_back.Models.Subject_Assess", b =>
                {
                    b.HasOne("CMS_back.Models.Assess", "Assess")
                        .WithMany("Subject_Assesss")
                        .HasForeignKey("AssessID");

                    b.HasOne("CMS_back.Models.Subject", "Subject")
                        .WithMany("subject_Assesses")
                        .HasForeignKey("SubjectID");

                    b.Navigation("Assess");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CMS_back.Models.Subject_Committees", b =>
                {
                    b.HasOne("CMS_back.Models.Committees", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeID");

                    b.HasOne("CMS_back.Models.Subject", "Subject")
                        .WithMany("Subject_Committees")
                        .HasForeignKey("SubjectID");

                    b.Navigation("Committee");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CMS_back.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CMS_back.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CMS_back.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CMS_back.Models.ACAD_YEAR", b =>
                {
                    b.Navigation("StudentSemesters");
                });

            modelBuilder.Entity("CMS_back.Models.ApplicationUser", b =>
                {
                    b.Navigation("FaculityLeader");

                    b.Navigation("UserCreatorControls");
                });

            modelBuilder.Entity("CMS_back.Models.Assess", b =>
                {
                    b.Navigation("Subject_Assesss");
                });

            modelBuilder.Entity("CMS_back.Models.Control", b =>
                {
                    b.Navigation("ControlSubjects");

                    b.Navigation("ControlUsers");

                    b.Navigation("conrol_Addresses");
                });

            modelBuilder.Entity("CMS_back.Models.Control_Task", b =>
                {
                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity", b =>
                {
                    b.Navigation("Controls");

                    b.Navigation("Nodes");

                    b.Navigation("Phases");

                    b.Navigation("Semesters");

                    b.Navigation("Staff");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CMS_back.Models.Faculity_Node", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("Faculity_Nodes");

                    b.Navigation("StudentSemesters");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("CMS_back.Models.Student", b =>
                {
                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("CMS_back.Models.Subject", b =>
                {
                    b.Navigation("ControlSubjects");

                    b.Navigation("Subject_Committees");

                    b.Navigation("subject_Assesses");
                });
#pragma warning restore 612, 618
        }
    }
}
