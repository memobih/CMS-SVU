// <auto-generated />
using System;
using CMS_back.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CMS_back.Migrations
{
    [DbContext(typeof(CMSContext))]
    partial class CMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CMS_back.Reposatory.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Control_TextID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FaculityEmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FaculityLeaderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MemberOfControlID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ScientificDegree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Control_TextID");

                    b.HasIndex("FaculityEmployeeID");

                    b.HasIndex("MemberOfControlID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Control", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ACAD_YEAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControlManagerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("End_Date")
                        .HasColumnType("date");

                    b.Property<string>("FaculityID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Faculity_Node")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculity_Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculity_Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Start_Date")
                        .HasColumnType("date");

                    b.Property<string>("UserCreatorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ControlManagerID");

                    b.HasIndex("FaculityID");

                    b.HasIndex("UserCreatorID");

                    b.ToTable("Control", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.ControlSubject", b =>
                {
                    b.Property<string>("ControlID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ControlID", "SubjectID");

                    b.HasIndex("SubjectID");

                    b.ToTable("ControlSubject", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Control_Addresses", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControlID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ControlID");

                    b.ToTable("Control_Addresse", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Control_Text", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ControlID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDone")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ControlID");

                    b.HasIndex("CreateById");

                    b.ToTable("Control_Text", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserLeaderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserLeaderID")
                        .IsUnique();

                    b.ToTable("Faculity", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity_Node", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculityNodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("FaculityNodeID");

                    b.HasIndex("ParentID");

                    b.ToTable("Faculity_Node", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity_Phases", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculityID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FaculityID");

                    b.ToTable("Faculity_Phase", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity_Semester", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculityID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FaculityID");

                    b.ToTable("Faculity_Semester", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Student", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.StudentSubject", b =>
                {
                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentID", "SubjectID");

                    b.HasIndex("SubjectID");

                    b.ToTable("StudentSubject", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Subject", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Credit_Hours")
                        .HasColumnType("int");

                    b.Property<string>("FaculityPhaseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaculitySemesterID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faculity_PhasesID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Faculity_SemesterID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IsDone")
                        .HasColumnType("int");

                    b.Property<int>("IsReview")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Faculity_PhasesID");

                    b.HasIndex("Faculity_SemesterID");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Subject_Assess", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("MAX_Degree")
                        .HasColumnType("float");

                    b.Property<double>("MIN_Degree")
                        .HasColumnType("float");

                    b.Property<string>("SubjectID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Subject_Assess", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.ApplicationUser", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Control_Text", null)
                        .WithMany("AssignTo")
                        .HasForeignKey("Control_TextID");

                    b.HasOne("CMS_back.Reposatory.Models.Faculity", "FaculityEmployee")
                        .WithMany("Users")
                        .HasForeignKey("FaculityEmployeeID");

                    b.HasOne("CMS_back.Reposatory.Models.Control", "MemberOfControl")
                        .WithMany("Users")
                        .HasForeignKey("MemberOfControlID");

                    b.Navigation("FaculityEmployee");

                    b.Navigation("MemberOfControl");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Control", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.ApplicationUser", "ControlManager")
                        .WithMany("UserManagerControls")
                        .HasForeignKey("ControlManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Reposatory.Models.Faculity", "Faculity")
                        .WithMany("Controls")
                        .HasForeignKey("FaculityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Reposatory.Models.ApplicationUser", "UserCreator")
                        .WithMany("UserCreatorControls")
                        .HasForeignKey("UserCreatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlManager");

                    b.Navigation("Faculity");

                    b.Navigation("UserCreator");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.ControlSubject", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Control", "Control")
                        .WithMany("ControlSubjects")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Reposatory.Models.Subject", "Subject")
                        .WithMany("ControlSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Control_Addresses", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Control", "Control")
                        .WithMany()
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Control_Text", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Control", "Control")
                        .WithMany("Texts")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Reposatory.Models.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.ApplicationUser", "UserLeader")
                        .WithOne("FaculityLeader")
                        .HasForeignKey("CMS_back.Reposatory.Models.Faculity", "UserLeaderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLeader");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity_Node", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Faculity", "FaculityNode")
                        .WithMany("Nodes")
                        .HasForeignKey("FaculityNodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Reposatory.Models.Faculity_Node", "Parent")
                        .WithMany("Faculity_Nodes")
                        .HasForeignKey("ParentID");

                    b.Navigation("FaculityNode");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity_Phases", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Faculity", "Faculity")
                        .WithMany("Phases")
                        .HasForeignKey("FaculityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculity");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity_Semester", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Faculity", "Faculity")
                        .WithMany("Semesters")
                        .HasForeignKey("FaculityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculity");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.StudentSubject", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Reposatory.Models.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Subject", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Faculity_Phases", "Faculity_Phases")
                        .WithMany("Subjects")
                        .HasForeignKey("Faculity_PhasesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Reposatory.Models.Faculity_Semester", "Faculity_Semester")
                        .WithMany("Subjects")
                        .HasForeignKey("Faculity_SemesterID");

                    b.Navigation("Faculity_Phases");

                    b.Navigation("Faculity_Semester");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Subject_Assess", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.Subject", "Subject")
                        .WithMany("subject_Assesses")
                        .HasForeignKey("SubjectID");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_back.Reposatory.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CMS_back.Reposatory.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.ApplicationUser", b =>
                {
                    b.Navigation("FaculityLeader");

                    b.Navigation("UserCreatorControls");

                    b.Navigation("UserManagerControls");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Control", b =>
                {
                    b.Navigation("ControlSubjects");

                    b.Navigation("Texts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Control_Text", b =>
                {
                    b.Navigation("AssignTo");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity", b =>
                {
                    b.Navigation("Controls");

                    b.Navigation("Nodes");

                    b.Navigation("Phases");

                    b.Navigation("Semesters");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity_Node", b =>
                {
                    b.Navigation("Faculity_Nodes");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity_Phases", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Faculity_Semester", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Student", b =>
                {
                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("CMS_back.Reposatory.Models.Subject", b =>
                {
                    b.Navigation("ControlSubjects");

                    b.Navigation("StudentSubjects");

                    b.Navigation("subject_Assesses");
                });
#pragma warning restore 612, 618
        }
    }
}
